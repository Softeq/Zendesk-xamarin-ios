// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1.3 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
// swift-module-flags: -target armv7-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MessagingSDK
import CommonUISDK
import Foundation
import MessagingAPI
@_exported import MessagingSDK
import SDKConfigurations
import Swift
@objc(ZDKMessaging) final public class Messaging : ObjectiveC.NSObject {
  @objc public static var instance: MessagingSDK.Messaging {
    @objc get
  }
  @objc deinit
  final public func buildUI(engines: [MessagingAPI.Engine], configs: [SDKConfigurations.Configuration] = []) throws -> UIKit.UIViewController
}
extension Messaging : CommonUISDK.MessagingCoordinatorDelegate {
  final public func messagingCoordinator(_ coordinator: CommonUISDK.MessagingCoordinatorProtocol, didPerformAction action: CommonUISDK.MessagingCoordinatorAction)
}
extension Messaging : MessagingAPI.MessagingAPIProtocol {
  final public func getTransferOptions() -> [MessagingAPI.TransferOptionDescription]
  final public func getConversationLog() -> MessagingAPI.ConversationLogProtocol
  final public func getConfigurations() -> SDKConfigurations.Configurations
  final public func getBotAgentDetails() -> MessagingAPI.AgentDetails
}
@objc extension Messaging {
  @objc @available(swift, obsoleted: 1.0)
  final public func buildUI(engines: [MessagingAPI.ZDKEngine], configs: [SDKConfigurations.Configuration]) throws -> UIKit.UIViewController
}
extension TextResponse : MessagingAPI.LoggableMessage {
  public func messageLog() -> Swift.String
}
extension ArticlesResponse : MessagingAPI.LoggableMessage {
  public func messageLog() -> Swift.String
}
extension TransferResponse : MessagingAPI.LoggableMessage {
  public func messageLog() -> Swift.String
}
extension FileQuery : MessagingAPI.LoggableMessage {
  public func messageLog() -> Swift.String
}
extension TextQuery : MessagingAPI.LoggableMessage {
  public func messageLog() -> Swift.String
}
extension ImageQuery : MessagingAPI.LoggableMessage {
  public func messageLog() -> Swift.String
}
extension ImageResponse : MessagingAPI.LoggableMessage {
  public func messageLog() -> Swift.String
}
final public class DispatchTimer {
  @objc deinit
  public init(timeInterval: Foundation.TimeInterval)
  final public func execute(_ block: @escaping () -> Swift.Void)
  final public func stop()
}
@objc(ZDKMessagingConfiguration) final public class MessagingConfiguration : ObjectiveC.NSObject, SDKConfigurations.Configuration {
  @objc final public var name: Swift.String
  @objc final public var botAvatar: UIKit.UIImage
  @objc override dynamic public init()
  @objc deinit
}
extension FileResponse : MessagingAPI.LoggableMessage {
  public func messageLog() -> Swift.String
}
extension ActionResponse : MessagingAPI.LoggableMessage {
  public func messageLog() -> Swift.String
}
